一、题干
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

二、错误记录
1.链表头指针引用错误，导致链表中存储的数据不完整
//加一个for循环，循环到l3的尾节点
                    while(l3.next!=null)
                    {
                        l3=l3.next;
                    }
                    
                    l3.next=newNode; 
 l3最后指向的是倒数第二个节点，所以输出并不完整，需要另一个指在头结点的引用。
2.if判断语句范围不正确，导致出现空指针错误

                    if(l1.next!=null&&l2.next!=null){
                         l1=l1.next;
                         l2=l2.next;
                    }else{
                        break;
                    }
  这个判断必须l1,l2都不为空，但是题目有可能l1,l2某一项为空
三、代码
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //设置一个进位标志
        int flag=0;
        //新建一个不带任何值的节点当做头结点用来遍历链表
        ListNode l3=new ListNode(0);
        ListNode l4=l3;
        while(l1!=null||l2!=null){
         
          int x = (l1!=null) ? l1.val : 0;
          int y = (l2!=null) ? l2.val : 0;
                
          int sum=x+y+flag;
          flag=sum/10;
                
          l4.next=new ListNode(sum%10);
          l4=l4.next;
               
          if(l1!=null) l1=l1.next;
          if(l2!=null) l2=l2.next;
        }   
          if(flag==1)
           { 
            l4.next=new ListNode(flag);
            }
        return l3.next; 
  }
}
